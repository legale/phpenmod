#!/bin/bash
################################################################################
# PHP extension enabler/disabler   author: Rumi <legale.legale et gmail.com>   #
################################################################################

# Colors
# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37

RED='\033[0;31m';
GREEN='\033[0;32m';
BLUE='\033[0;34m';
NC='\033[0m';
# No Color

log() {
# return 1 if argument 1 is empty
  [[ -z "$1" ]] && return 1
  case $2 in
    GREEN)
      echo -e "$SCRIPT_NAME: ${GREEN}$1${NC}"
    ;;

    RED)
      echo -e "$SCRIPT_NAME: ${RED}$1${NC}"
    ;;

    *)
      echo -e "$SCRIPT_NAME: $1"
    ;;
  esac
}

help() {
  log "usage: ${SCRIPT_NAME} MODULE_NAME [MODULE_NAME]..."
}

get_priority() {
  if [[ -z $1 ]]; then
    return 1
  fi

  local -i MAX=`ls "$SCAN" | cut -d - -f 1 | tail -n 1`
  if [[ -z $MAX ]]; then
    declare -g -i "$1"=10
    return 1
  else
    # Increase and round up to tens
    declare -g -i "$1"=$(((MAX + 10) / 10 * 10))
    return 0
  fi
}

module_exists() {
  local MODNAME=$1

  if [[ ! -f "$EXTENSION_DIR/$MODNAME.so" ]]; then
    return 1
  fi
  return 0
}

module_is_enabled() {
  local MODNAME=$1
  if [[ -z $2 ]]; then
    local _INI_PATH="INI_PATH"
  else
    local _INI_PATH="$2"
  fi

  get_ini_path "$MODNAME" "$_INI_PATH"
  case $? in
    0)
      if grep -iq -e "^extension=${MODNAME}$" "$INI_PATH"; then
        return 0
      elif grep -iq -e "^;extension=${MODNAME}$" "$INI_PATH"; then
        return 1
      else
        return 2
      fi
    ;;
 
    1)  
      return 3
    ;;
    
    2)  
      return 4
    ;;
  esac
    
}

get_ini_path() {
  if [[ -z $1 ]] || [[ -z $2 ]]; then
    return 1
  fi

  local MODNAME="$1"

  local OUT=`find "${SCAN}" -name "*-${MODNAME}.ini"`
  local LINES=`echo "$OUT" | wc -l`
  if [[ $LINES > 1 ]]; then 
    log "$LINES ini files found:" RED
    echo -e "\n$OUT\n"
    log "Fix it first." RED
    return 2
  fi

  if [[ -z $OUT ]]; then
    declare -g "$2"=""
    return 1
  else
    declare -g "$2"="$OUT"
    return 0
  fi
}

make_scan_dir() {
  if ! [[ -d "$SCAN" ]]; then
    # redirect stderr to stdout
    OUT=`mkdir -p "$SCAN" 2>&1`
    if ! [[ -z "$OUT" ]]; then
      log "$OUT" RED
      return 1
   fi
  fi
  return 0
}

enmod() {
  local MODNAME=$1

  case "$MODNAME" in
    --help | -h)
      help
      return 0
      ;;

      "")
      help
      return 1
      ;;
  esac

  # check if extension exists
  if ! module_exists "$MODNAME"; then
    log "$SCRIPT_NAME: $MODNAME.so doesn't exist in the default PHP extension directory"
    return 1
  fi

  # create ini scan dir
  if ! make_scan_dir; then
    return 1
  fi

  module_is_enabled "$MODNAME" "INI_PATH"
  case $? in
  0)
    log "PHP extension $MODNAME enabled already." GREEN
    return 0
  ;;

  1)
    log "Trying to enable PHP extension $MODNAME..."
    sed -i "s/^\;\(extension=${MODNAME}\)$/\1/" "$INI_PATH"
  ;;

  2)
    log "Incorrect ini file content. Trying to fix..."
    echo -e "extension=$MODNAME\n" > "$INI_PATH"
  ;;

  3)
    get_priority "NUM"
    log "Ini file not found. Trying to create new..."
    echo -e "extension=$MODNAME\n" > "${SCAN}/${NUM}-${MODNAME}.ini"
  ;;

  4)
    return 1
  ;;
  esac

  if module_is_enabled "$MODNAME" "INI_PATH"; then
    log "Done." GREEN
    return 0
  else
    log "Failed." RED
    return 1
  fi
}

dismod() {
  local MODNAME=$1

  case "$MODNAME" in
    --help | -h)
      help
      return 0
    ;;

    "")
      help
      return 1
    ;;
  esac

  # create ini scan dir
  if ! make_scan_dir;
    then
    return 1
  fi

  module_is_enabled "$MODNAME" "INI_PATH"
   case $? in
     0)
      log "Trying to disable PHP extension $MODNAME..."
      sed -i "s/^\(extension=${MODNAME}\)$/\;\1/" "$INI_PATH"
    ;;

    1)
      log "PHP extension $MODNAME is disabled already." GREEN
      return 0
    ;;

    2)
      log "Incorrect ini file content. Trying to fix..."
      echo -e ";extension=$MODNAME\n" > "$INI_PATH"
    ;;

    3)
      log "PHP extension $MODNAME has not been enabled yet."
      return 1
    ;;
        
    4)
      return 1
    ;;
  esac

  # 1 expected if disabled
  module_is_enabled "$MODNAME"
    if [[ $? = 1 ]]; then
      log "Done." GREEN
      return 0
    else
       log "Failed." RED
       return 1
    fi

}

################################################################################
#                              Script code                                     #
################################################################################
SCRIPT_NAME=${0##*/}

PHP_BIN=${PHP_BIN:-php}

# check if php is installed
# redirect stderr to stdout
OUT=`exec which $PHP_BIN 2>&1`
if [[ -z "$OUT" ]]; then
  log "$OUT"
  log "PHP is not installed" RED
  exit 1
fi

# read PHP parameters
PARAMS=`$PHP_BIN -i | grep --color \
       -e "^extension_dir =>" \
       -e "^Scan this dir for additional .ini files =>" \
       `

# parse parameters to variables SCAN and EXTENSION_DIR
while read -r line; do
  typeset -g `echo $line | \
  cut -d ' ' -f 1 | \
  tr a-z A-Z`=`echo $line | \
  sed 's/^.* => \(.*\).*$/\1/'`
done <<< $PARAMS

# check if Scan this dir for additional .ini files is not empty
[[ SCAN != "(none)" ]] && echo -e "please build with ./configure --with-config-file-scan-dir=PATH\n" && exit 1

# integer return value variable
declare -i RETVAL=0

# if no arguments passed
[[ "$#" = 0 ]] && help && exit 1

# switch to define what to do
case "$SCRIPT_NAME" in
  phpenmod)
    for ARG in "$@"; do
      enmod $ARG
      [[ $? != 0 ]] && RETVAL+=1
    done
  ;;

  phpdismod)
    for ARG in "$@"; do
      dismod $ARG
      [[ $? != 0 ]] && RETVAL+=1
    done
  ;;

  *)
    help
  ;;
esac

exit $RETVAL
